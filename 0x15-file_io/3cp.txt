#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>

#define BUF_SIZE 1024

int main(int argc, char *argv[]) {
    if (argc != 3) {
        dprintf(STDERR_FILENO, "Usage: %s file_from file_to\n", argv[0]);
        exit(97);
    }

    int fd_from = open(argv[1], O_RDONLY);
    if (fd_from == -1) {
        dprintf(STDERR_FILENO, "Error: Can't read from file %s\n", argv[1]);
        exit(98);
    }

    int fd_to = open(argv[2], O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd_to == -1) {
        dprintf(STDERR_FILENO, "Error: Can't write to %s\n", argv[2]);
        exit(99);
    }

    char buf[BUF_SIZE];
    ssize_t bytes_read, bytes_written;

    while ((bytes_read = read(fd_from, buf, BUF_SIZE)) > 0) {
        bytes_written = write(fd_to, buf, bytes_read);
        if (bytes_written == -1) {
            dprintf(STDERR_FILENO, "Error: Can't write to %s\n", argv[2]);
            exit(99);
        }
        if (bytes_written != bytes_read) {
            dprintf(STDERR_FILENO, "Error: Incomplete write to %s\n", argv[2]);
            exit(99);
        }
    }

    if (bytes_read == -1) {
        dprintf(STDERR_FILENO, "Error: Can't read from file %s\n", argv[1]);
        exit(98);
    }

    if (close(fd_from) == -1) {
        dprintf(STDERR_FILENO, "Error: Can't close fd %d\n", fd_from);
        exit(100);
    }

    if (close(fd_to) == -1) {
        dprintf(STDERR_FILENO, "Error: Can't close fd %d\n", fd_to);
        exit(100);
    }

    return 0;
}

In this implementation, we first check if the number of arguments is correct. If not, we print the usage message and exit with code 97.

Next, we open the input file (file_from) and check if it exists and is readable. If not, we print an error message and exit with code 98.

Then, we open the output file (file_to) with the appropriate flags and permissions. If we can't create or write to the file, we print an error message and exit with code 99.

We then read from file_from and write to file_to in chunks of 1024 bytes at a time, using a buffer. We check if the write was successful, and if not, print an error message and exit with code 99.

If the read fails, we print an error message and exit with code 98.

Finally, we close both file descriptors and check if the closing was successful. If not, we print an error message and exit with code 100.